---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
const {classList, timeframe, title, description, org, tags,links,images, location } =
  Astro.props;
---

<div class:list={classList} class="card card-compact card-bordered md:w-112 lg:w-128  my-0">
  <div class="card-body gap-4" style="padding: 0;">
    <div class="grid grid-cols-3 gap-y-0">
      {title &&
      <div class="col-span-2 md:col-end-3 self-center text-left">
        <h1 class="capitalize card-title font-extrabold tracking-tighter  md:text-2xl">{title}</h1>  
      </div>
      }
     
{timeframe &&  
        <div class="col-auto self-start justify-self-end">

   <div class="badge p-3 text-center badge-netural font-mono">
    {timeframe}
  </div> 
  </div>
  }
   {links &&
    <div class=`justify-self-start ${links.length > 1 ? " col-start-1 col-span-2  sm:col-auto" : "col-auto" }`>
              {links.map(link => (<a target="_blank" href={link.url}>
                <button  class="btn btn-netural btn-sm  sm:btn-md">
                  {link.label}
                  <Icon name="carbon:arrow-up-right" class=" mr-1" />
                </button>
              </a>)
              )}
    </div>
}
    {(location || org) &&
    <div class="sm:col-span-2 col-span-3 sm:col-start-1 flex mt-4 text-accent">
      {location && (
        <Icon name="carbon:location" class="text-secondary w-4 h-4 mr-1" />
        <span class="text-sm">{location}</span>
      )}
    {org &&
    <a href={org.url} target="_blank" class="link link-hover text-sm  text-right flex justify-center items-center">
    {org.url !== "#" && <Icon name="carbon:building" class="text-secondary w-4 h-4 ml-4 mr-1" />}
    {org.name}
    </a>
    }
    </div>
    }
  
    </div>
    {images &&
      <div class="carousel carousel-center rounded-box max-w-[85vw] sm:max-w-[60vw] space-x-4 px-1 py-4">
        {images.map(img => 
      <div class="carousel-item w-[90%] md:w-6/12">
        <Image class:list="w-full rounded-box grayscale-[100] hover:grayscale-0" src={img} quality='100' alt=`"${title}" project preview` width="600" height="500">
      </div>
        )}
      </div>
    }
    <div class="grid grid-cols-3 gap-4 place-items-center">
      <div class="self-start col-span-3 justify-self-start text-left">
        <article class="prose text-secondary">
          {description instanceof Object ?
              <description.Content/>
          :
          <Fragment set:html={description}></Fragment>
          }
        </article>
        {Array.isArray(tags) && (
          <div class="flex flex-wrap content-around gap-2 my-4">
            {tags.map(item => 
              <span class="badge text-center badge-ghost p-3 dark:bg-base-300" >{item}</span>
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</div>